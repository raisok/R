library(org.Rn.eg.db)
install.packages("org.Rn.eg.db")
source("http://bioconductor.org/biocLite.R")
biocLite('org.Rn.eg.db')
k <- keys(org.Hs.eg.db, keytype = "ENTREZID")[1:3]
k <- keys(org.Rn.eg.db, keytype = "ENTREZID")[1:3]
library(pheatmap)
setwd("E:/IMA/Rscript/K-means/")
read.delim(file="all.deg.genes.fpkm.xls",header = T)
data = read.delim(file="all.deg.genes.fpkm.xls",header = T)
head(data)
library(RColorBrewer)
index <- duplicated(data[,1])
removedupdata=data[!index,]
name=removedupdata[,1]
data = removedupdata[,-1]
row.names(data)=name
data<-data[apply(data,1,sum)>1,]
head(data)
pheatmap(data,kmeans_k = 3)
pheatmap(data,kmeans_k = 3)
pheatmap(data,kmeans_k = 3)
pheatmap(data,kmeans_k = 3)
pheatmap(data,kmeans_k = 3)
pheatmap(data,kmeans_k = 3)
pheatmap(data,kmeans_k = 3)
pheatmap(data,kmeans_k = 4)
data<-t(scale(t(data)))
pheatmap(data,kmeans_k = 4)
pheatmap(data,kmeans_k = 3)
K <- 2:8
round <- 30# 每次迭代30次，避免局部最优
rst <- sapply(K,function(i){
print(paste("K=",i))
mean(sapply(1:round,function(r){
print(paste("Round",r))
result <- kmeans(data, i)
stats <- cluster.stats(dist(data), result$cluster)
stats$avg.silwidth
}))
})
plot(K,rst,type='l',main='轮廓系数与K的关系', ylab='轮廓系数')
rst
result <- kmeans(data, 1)
result
result$cluster
head(result$cluster)[1:5]
length(result$cluster)
a=dist(data)
a
stats <- cluster.stats(dist(data), result$cluster)
library(cluster)
stats <- cluster.stats(dist(data), result$cluster)
cluster.stats
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:8) wss[i] <- sum(kmeans(data,centers=i)$withinss)
plot(1:8, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
pheatmap(data,name = "heatmap",
column_names_side = "bottom",
col = colorRamp2(c(-2, 0, 2), c("green", "white", "red")),
cluster_columns = FALSE,
row_dend_side = "left",
show_row_names = FALSE,
clustering_method_rows = "complete",
)
library(ComplexHeatmap)
library(circlize)
install.packages("circlize")
install.packages("ComplexHeatmap")
source("https://bioconductor.org/biocLite.R")
biocLite("ComplexHeatmap")
library(ComplexHeatmap)
library(circlize)
pheatmap(data,name = "heatmap",
column_names_side = "bottom",
col = colorRamp2(c(-2, 0, 2), c("green", "white", "red")),
cluster_columns = FALSE,
row_dend_side = "left",
show_row_names = FALSE,
clustering_method_rows = "complete",
)
Heatmap(data,name = "heatmap",
column_names_side = "bottom",
col = colorRamp2(c(-2, 0, 2), c("green", "white", "red")),
cluster_columns = FALSE,
row_dend_side = "left",
show_row_names = FALSE,
clustering_method_rows = "complete",
)
data$cv <- apply(data, 1, function(x){
sd(x)/mean(x)*100
})
data$cv
data$cv <- apply(data, 1, function(x){sd(x)/mean(x)*100})
data_df <- data[order(data$cv, decreasing = T),]
library(ComplexHeatmap)
library(circlize)
Heatmap(data_scale,name = "heatmap",
column_names_side = "bottom",
col = colorRamp2(c(-2, 0, 2), c("green", "white", "red")),
cluster_columns = FALSE,
row_dend_side = "left",
show_row_names = FALSE,
clustering_method_rows = "complete",
)
head(data)
#读入表达量矩阵
data = read.delim(file="all.deg.genes.fpkm.xls",header = T)
#去掉第一列名相同的行
index <- duplicated(data[,1])
removedupdata=data[!index,]
name=removedupdata[,1]
data = removedupdata[,-1]
row.names(data)=name
#进行数据过滤和均一化，过滤小于1的行
data<-data[apply(data,1,sum)>1,]
data<-t(scale(t(data)))
head(data)
data_scale=data
library(ComplexHeatmap)
library(circlize)
Heatmap(data_scale,name = "heatmap",
column_names_side = "bottom",
col = colorRamp2(c(-2, 0, 2), c("green", "white", "red")),
cluster_columns = FALSE,
row_dend_side = "left",
show_row_names = FALSE,
clustering_method_rows = "complete",
)
wss <- (nrow(data_scale)-1)*sum(apply(data_scale,2,var))
for (i in 2:8) wss[i] <- sum(kmeans(data_scale,centers=i)$withinss)
plot(1:8, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
library(cluster)
gap_stat <- clusGap(data_scale, FUN = kmeans, nstart = 25, K.max = 8, B = 300, verbose = interactive())
plot(1:8, wss, type="b", xlab="Number of Clusters",ylab="Within groups sum of squares")
K <- 2:8
round <- 30# 每次迭代30次，避免局部最优
rst <- sapply(K,function(i){
print(paste("K=",i))
mean(sapply(1:round,function(r){
print(paste("Round",r))
result <- kmeans(data_scale, i)
stats <- cluster.stats(dist(data_scale), result$cluster)
stats$avg.silwidth
}))
})
plot(K,rst,type='l',main='轮廓系数与K的关系', ylab='轮廓系数')
Heatmap(data_scale,name = "heatmap",
km = 3,
column_names_side = "bottom",
col = colorRamp2(c(-2, 0, 2), c("green", "white", "red")),
cluster_columns = FALSE,
row_dend_side = "left",
show_row_names = FALSE,
km_title = "%i"
)
library(ggplot2)
library(grid)
grid.newpage()
pushViewport(viewport(layout = grid.layout(1,3)))
vplayout = function(x,y){viewport(layout.pos.row = x,layout.pos.col = y)}
for (i in 1:3){
p <- ggplot(filter(df, cluster == i), aes(x = sample, y = value, group = id, col = col)) +
geom_line() +
theme_light() +
scale_colour_manual(values = c("red", "grey")) +
guides(col = FALSE)
print(p,vp = vplayout(1,i))
}
df
head(data_scale)
library(ggplot2)
library(grid)
grid.newpage()
pushViewport(viewport(layout = grid.layout(1,3)))
vplayout = function(x,y){viewport(layout.pos.row = x,layout.pos.col = y)}
for (i in 1:3){
p <- ggplot(filter(df, cluster == i), aes(x = sample, y = value, group = id, col = col)) +
geom_line() +
theme_light() +
scale_colour_manual(values = c("red", "grey")) +
guides(col = FALSE)
print(p,vp = vplayout(1,i))
}
library(ggplot2)
library(grid)
grid.newpage()
pushViewport(viewport(layout = grid.layout(1,3)))
vplayout = function(x,y){viewport(layout.pos.row = x,layout.pos.col = y)}
for (i in 1:3){
p <- ggplot(filter(df, cluster == i), aes(x = sample, y = value, group = id, col = col)) +
geom_line() +
theme_light() +
scale_colour_manual(values = c("red", "grey")) +
guides(col = FALSE)
print(p,vp = vplayout(1,i))
}
library(ggplot2)
library(grid)
grid.newpage()
pushViewport(viewport(layout = grid.layout(1,3)))
vplayout = function(x,y){viewport(layout.pos.row = x,layout.pos.col = y)}
for (i in 1:3){
p <- ggplot(filter(data_scale, cluster == i), aes(x = sample, y = value, group = id, col = col)) +
geom_line() +
theme_light() +
scale_colour_manual(values = c("red", "grey")) +
guides(col = FALSE)
print(p,vp = vplayout(1,i))
}
Heatmap(data_scale,name = "heatmap",
km = 3,
column_names_side = "bottom",
col = colorRamp2(c(-2, 0, 2), c("green", "white", "red")),
cluster_columns = FALSE,
row_dend_side = "left",
show_row_names = FALSE,
km_title = "%i"
)
Heatmap(data_scale,name = "heatmap",
km = 3,
column_names_side = "bottom",
col = colorRamp2(c(-2, 0, 2), c("green", "white", "red")),
cluster_columns = FALSE,
row_dend_side = "left",
show_row_names = FALSE,
km_title = "%i"
)
Heatmap(data_scale,name = "heatmap",
km = 3,
column_names_side = "bottom",
col = colorRamp2(c(-2, 0, 2), c("green", "white", "red")),
cluster_columns = FALSE,
row_dend_side = "left",
show_row_names = FALSE,
km_title = "%i"
)
