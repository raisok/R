data <- data[1:n,]
} else {
data <- data
}
return(data)
}
###
draw_bar_plot <- function(goinput){
bar <- ggplot(goinput,aes(y=Count,x=reorder(pretty_varname,-log10(p.adjust)))) +
geom_bar(stat="identity", width=0.7,aes(fill=-log10(p.adjust))) + coord_flip() +
scale_fill_gradientn(colours=c(rev(brewer.pal(11, "RdYlBu")[5:11]))) +
labs(color=expression(-log10(p.adjust)),x="GO term",y="Gene Number",title="Most Top 15 enrich GO Term")+
theme_bw() +
theme(
title =element_text(size=6,face="plain",colour="black"),
axis.title = element_text(size=6,face="plain",colour="black"),
panel.grid=element_blank(),
axis.line = element_line(size=0.25,colour = "black"),
axis.text = element_text(color = "black",size = 6,face="plain"),
legend.title=element_text(size=6,colour = "black",face="plain"),
legend.text = element_text(colour = 'black',face = 'plain',size=6)
)
return (bar)
}
###
DEGs <- read.table(args[5],sep="\t",header=T,check.names=F,quote="")$gene
ont <- c("MF","BP","CC")
type <- c("molecular_function","biological_process","cellular_component")
ego_MF <- enrichGO(gene=as.vector(DEGs),OrgDb=org.Mm.eg.db,ont=ont[1],pAdjustMethod="BH",pvalueCutoff=0.05,qvalueCutoff=1,keyType='SYMBOL')
write.table(ego_MF,file=paste(args[6],".",type[1],"_enrichment.xls",sep=""),sep="\t",quote=F,row.names=F)
ego_MF<- ego_MF[order(ego_MF$p.adjust),]
ego_MF <- num(ego_MF,15)
w <- set_width(ego_MF)
ego_MF$pretty_varname = apply(ego_MF,1,shorten_names)
ego_MF<- draw_bar_plot(ego_MF)
ggsave(file=paste(args[6],".",type[1],"_enrichment.pdf",sep=""),ego_MF,width=w[1],height=w[2])
ggsave(file=paste(args[6],".",type[1],"_enrichment.png",sep=""),ego_MF,width=w[1],height=w[2])
ego_BP <- enrichGO(gene=as.vector(DEGs),OrgDb=org.Mm.eg.db,ont=ont[2],pAdjustMethod="BH",pvalueCutoff=0.05,qvalueCutoff=1,keyType='SYMBOL')
write.table(ego_BP,file=paste(args[6],".",type[2],"_enrichment.xls",sep=""),sep="\t",quote=F,row.names=F)
ego_BP<- ego_BP[order(ego_BP$p.adjust),]
ego_BP <- num(ego_BP,15)
w <- set_width(ego_BP)
ego_BP$pretty_varname = apply(ego_BP,1,shorten_names)
ego_BP<-draw_bar_plot(ego_BP)
ggsave(file=paste(args[6],".",type[2],"_enrichment.pdf",sep=""),ego_BP,width=w[1],height=w[2])
ggsave(file=paste(args[6],".",type[2],"_enrichment.png",sep=""),ego_BP,width=w[1],height=w[2])
ego_CC <- enrichGO(gene=as.vector(DEGs),OrgDb=org.Mm.eg.db,ont=ont[3],pAdjustMethod="BH",pvalueCutoff=0.05,qvalueCutoff=1,keyType='SYMBOL')
write.table(ego_CC,file=paste(args[6],".",type[3],"_enrichment.xls",sep=""),sep="\t",quote=F,row.names=F)
ego_CC<- ego_CC[order(ego_CC$p.adjust),]
ego_CC <- num(ego_CC,15)
w <- set_width(ego_CC)
ego_CC$pretty_varname = apply(ego_CC,1,shorten_names)
ego_CC<-draw_bar_plot(ego_CC)
ggsave(file=paste(args[6],".",type[3],"_enrichment.pdf",sep=""),ego_CC,width=w[1],height=w[2])
ggsave(file=paste(args[6],".",type[3],"_enrichment.png",sep=""),ego_CC,width=w[1],height=w[2])
args = commandArgs()
library(clusterProfiler)
library(org.Mm.eg.db)
library(ggplot2)
library(RColorBrewer)
###
setwd("E:/IMA/Rscript/Function/")
args[5]="Sham_vs_12-HETE.differentially_expressed_genes.xls"
args[6]="Sham_vs_12-HETE"
args <- c(1,1,1,1,"Sham_vs_12-HETE.differentially_expressed_genes.xls","Sham_vs_12-HETE")
###
### change GO Term name length
shorten_names2 <- function(x, n_word=4, n_char=40){
if (length(strsplit(x, " ")[[1]]) > n_word || (nchar(x) > 40))
{
if (nchar(x) > 40) x <- substr(x, 1, 40)
x <- paste(paste(strsplit(x, " ")[[1]][1:min(length(strsplit(x," ")[[1]]), n_word)],
collapse=" "), "...", sep="")
return(x)
}
else
{
return(x)
}
}
shorten_names <- function(x, n_word=4, n_char=40){
shortname = x["Description"]
if (length(strsplit(shortname, " ")[[1]]) > n_word || (nchar(shortname) > n_char))
{
if (nchar(shortname) > n_char) shortname <- substr(shortname, 1, n_char)
y <- paste(paste(strsplit(shortname, " ")[[1]][1:min(length(strsplit(shortname," ")[[1]]), n_word)],
collapse=" "), "...", sep="")
return(y)
}
else
{
return (shortname)
}
}
### add by yueyao at 20191121
###
set_width <- function(para1){
#para<- para1[order(para1$p.adjust),][1:15,]
Des <- para1$pretty_varname
max1<- max(nchar(c(as.character(Des))))
width<- max1*0.09
if(nrow(para1)>10) {
height <- 8*nrow(para1)/60
} else {
height <- 1.6
}
return(c(width,height))
}
### add by hxl at 20191121
num<- function(data,n){
if(nrow(data)>n) {
data <- data[1:n,]
} else {
data <- data
}
return(data)
}
###
draw_bar_plot <- function(goinput){
bar <- ggplot(goinput,aes(y=Count,x=reorder(pretty_varname,-log10(p.adjust)))) +
geom_bar(stat="identity", width=0.7,aes(fill=-log10(p.adjust))) + coord_flip() +
scale_fill_gradientn(colours=c(rev(brewer.pal(11, "RdYlBu")[5:11]))) +
labs(color=expression(-log10(p.adjust)),x="GO term",y="Gene Number",title="Most Top 15 enrich GO Term")+
theme_bw() +
theme(
title =element_text(size=6,face="plain",colour="black"),
axis.title = element_text(size=6,face="plain",colour="black"),
panel.grid=element_blank(),
axis.line = element_line(size=0.25,colour = "black"),
axis.text = element_text(color = "black",size = 6,face="plain"),
legend.title=element_text(size=6,colour = "black",face="plain"),
legend.text = element_text(colour = 'black',face = 'plain',size=6)
)
return (bar)
}
###
DEGs <- read.table(args[5],sep="\t",header=T,check.names=F,quote="")$gene
ont <- c("MF","BP","CC")
type <- c("molecular_function","biological_process","cellular_component")
ego_MF <- enrichGO(gene=as.vector(DEGs),OrgDb=org.Mm.eg.db,ont=ont[1],pAdjustMethod="BH",pvalueCutoff=0.05,qvalueCutoff=1,keyType='SYMBOL')
write.table(ego_MF,file=paste(args[6],".",type[1],"_enrichment.xls",sep=""),sep="\t",quote=F,row.names=F)
ego_MF<- ego_MF[order(ego_MF$p.adjust),]
ego_MF <- num(ego_MF,15)
w <- set_width(ego_MF)
ego_MF$pretty_varname = apply(ego_MF,1,shorten_names)
ego_MF<- draw_bar_plot(ego_MF)
ggsave(file=paste(args[6],".",type[1],"_enrichment.pdf",sep=""),ego_MF,width=w[1],height=w[2])
ggsave(file=paste(args[6],".",type[1],"_enrichment.png",sep=""),ego_MF,width=w[1],height=w[2])
ego_BP <- enrichGO(gene=as.vector(DEGs),OrgDb=org.Mm.eg.db,ont=ont[2],pAdjustMethod="BH",pvalueCutoff=0.05,qvalueCutoff=1,keyType='SYMBOL')
write.table(ego_BP,file=paste(args[6],".",type[2],"_enrichment.xls",sep=""),sep="\t",quote=F,row.names=F)
ego_BP<- ego_BP[order(ego_BP$p.adjust),]
ego_BP <- num(ego_BP,15)
w <- set_width(ego_BP)
ego_BP$pretty_varname = apply(ego_BP,1,shorten_names)
ego_BP<-draw_bar_plot(ego_BP)
ggsave(file=paste(args[6],".",type[2],"_enrichment.pdf",sep=""),ego_BP,width=w[1],height=w[2])
ggsave(file=paste(args[6],".",type[2],"_enrichment.png",sep=""),ego_BP,width=w[1],height=w[2])
ego_CC <- enrichGO(gene=as.vector(DEGs),OrgDb=org.Mm.eg.db,ont=ont[3],pAdjustMethod="BH",pvalueCutoff=0.05,qvalueCutoff=1,keyType='SYMBOL')
write.table(ego_CC,file=paste(args[6],".",type[3],"_enrichment.xls",sep=""),sep="\t",quote=F,row.names=F)
ego_CC<- ego_CC[order(ego_CC$p.adjust),]
ego_CC <- num(ego_CC,15)
w <- set_width(ego_CC)
ego_CC$pretty_varname = apply(ego_CC,1,shorten_names)
ego_CC<-draw_bar_plot(ego_CC)
ggsave(file=paste(args[6],".",type[3],"_enrichment.pdf",sep=""),ego_CC,width=w[1],height=w[2])
ggsave(file=paste(args[6],".",type[3],"_enrichment.png",sep=""),ego_CC,width=w[1],height=w[2])
w[1]
w[2]
ego_CC$pretty_varname = apply(ego_CC,1,shorten_names)
w <- set_width(ego_CC)
ego_CC<-draw_bar_plot(ego_CC)
ggsave(file=paste(args[6],".",type[3],"_enrichment.pdf",sep=""),ego_CC,width=w[1],height=w[2])
ggsave(file=paste(args[6],".",type[3],"_enrichment.png",sep=""),ego_CC,width=w[1],height=w[2])
args = commandArgs()
library(clusterProfiler)
library(org.Mm.eg.db)
library(ggplot2)
library(RColorBrewer)
###
setwd("E:/IMA/Rscript/Function/")
args[5]="Sham_vs_12-HETE.differentially_expressed_genes.xls"
args[6]="Sham_vs_12-HETE"
args <- c(1,1,1,1,"Sham_vs_12-HETE.differentially_expressed_genes.xls","Sham_vs_12-HETE")
###
### change GO Term name length
shorten_names2 <- function(x, n_word=4, n_char=40){
if (length(strsplit(x, " ")[[1]]) > n_word || (nchar(x) > 40))
{
if (nchar(x) > 40) x <- substr(x, 1, 40)
x <- paste(paste(strsplit(x, " ")[[1]][1:min(length(strsplit(x," ")[[1]]), n_word)],
collapse=" "), "...", sep="")
return(x)
}
else
{
return(x)
}
}
shorten_names <- function(x, n_word=4, n_char=40){
shortname = x["Description"]
if (length(strsplit(shortname, " ")[[1]]) > n_word || (nchar(shortname) > n_char))
{
if (nchar(shortname) > n_char) shortname <- substr(shortname, 1, n_char)
y <- paste(paste(strsplit(shortname, " ")[[1]][1:min(length(strsplit(shortname," ")[[1]]), n_word)],
collapse=" "), "...", sep="")
return(y)
}
else
{
return (shortname)
}
}
### add by yueyao at 20191121
###
set_width <- function(para1){
#para<- para1[order(para1$p.adjust),][1:15,]
Des <- para1$pretty_varname
max1<- max(nchar(c(as.character(Des))))
width<- max1*0.09
if(nrow(para1)>10) {
height <- 8*nrow(para1)/60
} else {
height <- 1.6
}
return(c(width,height))
}
### add by hxl at 20191121
num<- function(data,n){
if(nrow(data)>n) {
data <- data[1:n,]
} else {
data <- data
}
return(data)
}
###
draw_bar_plot <- function(goinput){
bar <- ggplot(goinput,aes(y=Count,x=reorder(pretty_varname,-log10(p.adjust)))) +
geom_bar(stat="identity", width=0.7,aes(fill=-log10(p.adjust))) + coord_flip() +
scale_fill_gradientn(colours=c(rev(brewer.pal(11, "RdYlBu")[5:11]))) +
labs(color=expression(-log10(p.adjust)),x="GO term",y="Gene Number",title="Most Top 15 enrich GO Term")+
theme_bw() +
theme(
title =element_text(size=6,face="plain",colour="black"),
axis.title = element_text(size=6,face="plain",colour="black"),
panel.grid=element_blank(),
axis.line = element_line(size=0.25,colour = "black"),
axis.text = element_text(color = "black",size = 6,face="plain"),
legend.title=element_text(size=6,colour = "black",face="plain"),
legend.text = element_text(colour = 'black',face = 'plain',size=6)
)
return (bar)
}
###
DEGs <- read.table(args[5],sep="\t",header=T,check.names=F,quote="")$gene
ont <- c("MF","BP","CC")
type <- c("molecular_function","biological_process","cellular_component")
ego_MF <- enrichGO(gene=as.vector(DEGs),OrgDb=org.Mm.eg.db,ont=ont[1],pAdjustMethod="BH",pvalueCutoff=0.05,qvalueCutoff=1,keyType='SYMBOL')
write.table(ego_MF,file=paste(args[6],".",type[1],"_enrichment.xls",sep=""),sep="\t",quote=F,row.names=F)
ego_MF<- ego_MF[order(ego_MF$p.adjust),]
ego_MF <- num(ego_MF,15)
ego_MF$pretty_varname = apply(ego_MF,1,shorten_names)
w <- set_width(ego_MF)
ego_MF<- draw_bar_plot(ego_MF)
ggsave(file=paste(args[6],".",type[1],"_enrichment.pdf",sep=""),ego_MF,width=w[1],height=w[2])
ggsave(file=paste(args[6],".",type[1],"_enrichment.png",sep=""),ego_MF,width=w[1],height=w[2])
ego_BP <- enrichGO(gene=as.vector(DEGs),OrgDb=org.Mm.eg.db,ont=ont[2],pAdjustMethod="BH",pvalueCutoff=0.05,qvalueCutoff=1,keyType='SYMBOL')
write.table(ego_BP,file=paste(args[6],".",type[2],"_enrichment.xls",sep=""),sep="\t",quote=F,row.names=F)
ego_BP<- ego_BP[order(ego_BP$p.adjust),]
ego_BP <- num(ego_BP,15)
ego_BP$pretty_varname = apply(ego_BP,1,shorten_names)
w <- set_width(ego_BP)
ego_BP<-draw_bar_plot(ego_BP)
ggsave(file=paste(args[6],".",type[2],"_enrichment.pdf",sep=""),ego_BP,width=w[1],height=w[2])
ggsave(file=paste(args[6],".",type[2],"_enrichment.png",sep=""),ego_BP,width=w[1],height=w[2])
ego_CC <- enrichGO(gene=as.vector(DEGs),OrgDb=org.Mm.eg.db,ont=ont[3],pAdjustMethod="BH",pvalueCutoff=0.05,qvalueCutoff=1,keyType='SYMBOL')
write.table(ego_CC,file=paste(args[6],".",type[3],"_enrichment.xls",sep=""),sep="\t",quote=F,row.names=F)
ego_CC<- ego_CC[order(ego_CC$p.adjust),]
ego_CC <- num(ego_CC,15)
ego_CC$pretty_varname = apply(ego_CC,1,shorten_names)
w <- set_width(ego_CC)
ego_CC<-draw_bar_plot(ego_CC)
ggsave(file=paste(args[6],".",type[3],"_enrichment.pdf",sep=""),ego_CC,width=w[1],height=w[2])
ggsave(file=paste(args[6],".",type[3],"_enrichment.png",sep=""),ego_CC,width=w[1],height=w[2])
shorten_names <- function(x, n_word=4, n_char=40){
shortname = x["Description"]
Go_id = x["ID"]
if (length(strsplit(shortname, " ")[[1]]) > n_word || (nchar(shortname) > n_char))
{
if (nchar(shortname) > n_char) shortname <- substr(shortname, 1, n_char)
y <- paste(paste(strsplit(shortname, " ")[[1]][1:min(length(strsplit(shortname," ")[[1]]), n_word)],
collapse=" "), "...", sep="")
y <- paste(Go_id,y,sep=" / ")
return(y)
}
else
{
return (shortname)
}
}
ego_MF$pretty_varname = apply(ego_MF,1,shorten_names)
args = commandArgs()
library(clusterProfiler)
library(org.Mm.eg.db)
library(ggplot2)
library(RColorBrewer)
###
setwd("E:/IMA/Rscript/Function/")
args[5]="Sham_vs_12-HETE.differentially_expressed_genes.xls"
args[6]="Sham_vs_12-HETE"
args <- c(1,1,1,1,"Sham_vs_12-HETE.differentially_expressed_genes.xls","Sham_vs_12-HETE")
###
### change GO Term name length
shorten_names2 <- function(x, n_word=4, n_char=40){
if (length(strsplit(x, " ")[[1]]) > n_word || (nchar(x) > 40))
{
if (nchar(x) > 40) x <- substr(x, 1, 40)
x <- paste(paste(strsplit(x, " ")[[1]][1:min(length(strsplit(x," ")[[1]]), n_word)],
collapse=" "), "...", sep="")
return(x)
}
else
{
return(x)
}
}
shorten_names <- function(x, n_word=4, n_char=40){
shortname = x["Description"]
Go_id = x["ID"]
if (length(strsplit(shortname, " ")[[1]]) > n_word || (nchar(shortname) > n_char))
{
if (nchar(shortname) > n_char) shortname <- substr(shortname, 1, n_char)
y <- paste(paste(strsplit(shortname, " ")[[1]][1:min(length(strsplit(shortname," ")[[1]]), n_word)],
collapse=" "), "...", sep="")
y <- paste(Go_id,y,sep=" / ")
return(y)
}
else
{
return (shortname)
}
}
### add by yueyao at 20191121
###
set_width <- function(para1){
#para<- para1[order(para1$p.adjust),][1:15,]
Des <- para1$pretty_varname
max1<- max(nchar(c(as.character(Des))))
width<- max1*0.09
if(nrow(para1)>10) {
height <- 8*nrow(para1)/60
} else {
height <- 1.6
}
return(c(width,height))
}
### add by hxl at 20191121
num<- function(data,n){
if(nrow(data)>n) {
data <- data[1:n,]
} else {
data <- data
}
return(data)
}
###
draw_bar_plot <- function(goinput){
bar <- ggplot(goinput,aes(y=Count,x=reorder(pretty_varname,-log10(p.adjust)))) +
geom_bar(stat="identity", width=0.7,aes(fill=-log10(p.adjust))) + coord_flip() +
scale_fill_gradientn(colours=c(rev(brewer.pal(11, "RdYlBu")[5:11]))) +
labs(color=expression(-log10(p.adjust)),x="GO term",y="Gene Number",title="Most Top 15 enrich GO Term")+
theme_bw() +
theme(
title =element_text(size=6,face="plain",colour="black"),
axis.title = element_text(size=6,face="plain",colour="black"),
panel.grid=element_blank(),
axis.line = element_line(size=0.25,colour = "black"),
axis.text = element_text(color = "black",size = 6,face="plain"),
legend.key.size=unit(0.3,'cm'),
legend.title=element_text(size=6,colour = "black",face="plain"),
legend.text = element_text(colour = 'black',face = 'plain',size=6)
)
return (bar)
}
###
DEGs <- read.table(args[5],sep="\t",header=T,check.names=F,quote="")$gene
ont <- c("MF","BP","CC")
type <- c("molecular_function","biological_process","cellular_component")
ego_MF <- enrichGO(gene=as.vector(DEGs),OrgDb=org.Mm.eg.db,ont=ont[1],pAdjustMethod="BH",pvalueCutoff=0.05,qvalueCutoff=1,keyType='SYMBOL')
write.table(ego_MF,file=paste(args[6],".",type[1],"_enrichment.xls",sep=""),sep="\t",quote=F,row.names=F)
ego_MF<- ego_MF[order(ego_MF$p.adjust),]
ego_MF <- num(ego_MF,15)
ego_MF$pretty_varname = apply(ego_MF,1,shorten_names)
w <- set_width(ego_MF)
ego_MF<- draw_bar_plot(ego_MF)
ggsave(file=paste(args[6],".",type[1],"_enrichment.pdf",sep=""),ego_MF,width=w[1],height=w[2])
ggsave(file=paste(args[6],".",type[1],"_enrichment.png",sep=""),ego_MF,width=w[1],height=w[2])
ego_BP <- enrichGO(gene=as.vector(DEGs),OrgDb=org.Mm.eg.db,ont=ont[2],pAdjustMethod="BH",pvalueCutoff=0.05,qvalueCutoff=1,keyType='SYMBOL')
write.table(ego_BP,file=paste(args[6],".",type[2],"_enrichment.xls",sep=""),sep="\t",quote=F,row.names=F)
ego_BP<- ego_BP[order(ego_BP$p.adjust),]
ego_BP <- num(ego_BP,15)
ego_BP$pretty_varname = apply(ego_BP,1,shorten_names)
w <- set_width(ego_BP)
ego_BP<-draw_bar_plot(ego_BP)
ggsave(file=paste(args[6],".",type[2],"_enrichment.pdf",sep=""),ego_BP,width=w[1],height=w[2])
ggsave(file=paste(args[6],".",type[2],"_enrichment.png",sep=""),ego_BP,width=w[1],height=w[2])
ego_CC <- enrichGO(gene=as.vector(DEGs),OrgDb=org.Mm.eg.db,ont=ont[3],pAdjustMethod="BH",pvalueCutoff=0.05,qvalueCutoff=1,keyType='SYMBOL')
write.table(ego_CC,file=paste(args[6],".",type[3],"_enrichment.xls",sep=""),sep="\t",quote=F,row.names=F)
ego_CC<- ego_CC[order(ego_CC$p.adjust),]
ego_CC <- num(ego_CC,15)
ego_CC$pretty_varname = apply(ego_CC,1,shorten_names)
w <- set_width(ego_CC)
ego_CC<-draw_bar_plot(ego_CC)
ggsave(file=paste(args[6],".",type[3],"_enrichment.pdf",sep=""),ego_CC,width=w[1],height=w[2])
ggsave(file=paste(args[6],".",type[3],"_enrichment.png",sep=""),ego_CC,width=w[1],height=w[2])
library(gmodels)
library(ggplot2)
library(RColorBrewer)
library(dendextend)
library(ggrepel)
args <- commandArgs()
#### Only for Test
setwd("E:/IMA/Rscript/cluster/")
args[5] = "Ctrl_vs_XM1845_OE.fpkm.txt"
args[6] = "Ctrl"
args[7] = "XM1845_OE"
#windows set font
#windowsFonts(Times = windowsFont("Times New Roman"))
#windowsFonts(Arial = windowsFont("Arial"))
###
expr <- read.table(args[5],sep="\t",header=T,check.names=F,quote="")
if(length(args)==7){
colnum1 <- grep(paste("^",args[6],"-[0-9]+$",sep=""),colnames(expr))
colnum2 <- grep(paste("^",args[7],"-[0-9]+$",sep=""),colnames(expr))
expr <- expr[,c(1,colnum1,colnum2)]
keep <- apply(expr[,-1],1,sum) > 0
write.table(expr[keep,],file=paste(args[6],"_vs_",args[7],".fpkm.txt",sep=""),sep="\t",quote=F,row.names=F)
expr <- expr[,-1]
} else {
expr <- expr[,c(-1,-2)]
}
group <- rep(0,ncol(expr))
sorted <- rep(0,(length(args)-5))
for(m in 6:length(args)) {
M = m-5
sorted[M] = args[m]
colnum = grep(paste("^",args[m],sep=""),colnames(expr))
for(n in 1:length(colnum)) {
group[colnum[n]] = args[m]
}
}
data = t(as.matrix(log2(expr+1)))
data.pca = fast.prcomp(data,retx=T,scale=F,center=T)
a = summary(data.pca)
tmp = a[4]$importance
pro1 = as.numeric(sprintf("%.3f",tmp[2,1]))*100
pro2 = as.numeric(sprintf("%.3f",tmp[2,2]))*100
pc = as.data.frame(a$x)
pc$group = group
pc$names = rownames(pc)
xlab = paste("PC1(",pro1,"%)",sep="")
ylab = paste("PC2(",pro2,"%)",sep="")
pca_nolab = ggplot(pc,aes(PC1,PC2)) +geom_point(size=2,aes(color=group)) +
labs(x=xlab,y=ylab) +geom_hline(yintercept=0,linetype="dashed",color="black") +
geom_vline(xintercept=0,linetype="dashed",color="black") +theme_bw()+
theme(axis.title.x=element_text(colour = "black",size=6),
axis.title.y=element_text(colour = "black",size=6),
panel.grid=element_blank(),
axis.line=element_line(size=0.25,colour="black"),
axis.text = element_text(colour = "black",size=6)
) +
scale_color_discrete(limits=sorted,guide=FALSE) +labs(color="Sample") +
stat_ellipse(geom="polygon",alpha=1/4,aes(fill=group)) +
scale_fill_discrete(limits=sorted,guide=FALSE) +
geom_rug(aes(color=group))
#### change by yueyao at 2019.11.19
pca = pca_nolab+geom_text_repel(aes(label=names),size=2)
#### change by yueyao at 2019.11.19
if(length(args)==7){
out1 = paste(sorted,collapse="_vs_")
} else {
out1 = "allsamples"
}
out2 = paste("PCA.",out1,sep="")
ggsave(paste(out2,".pdf",sep=""),pca,width=2,height=2)
ggsave(paste(out2,".png",sep=""),pca,width=2,height=2)
####change by yueyao at 2019.11.19
ggsave(paste(out2,".nolab.pdf",sep=""),pca_nolab,width=2,height=2)
ggsave(paste(out2,".nolab.png",sep=""),pca_nolab,width=2,height=2)
####change by yueyao at 2019.11.19
###################################################################################################
hc = hclust(dist(data),method="average")
color = rep(0,length(labels(hc)))
for(m in 6:length(args)) {
M = m-5
colnum = grep(paste("^",args[m],"-[0-9]+",sep=""),labels(hc))
for(n in 1:length(colnum)) {
color[colnum[n]] = rainbow(length(args)-5)[M]
}
}
dend = as.dendrogram(hc) %>% set("labels_col",color) %>% set("labels_cex",1)  %>% set("leaves_pch",19) %>% set("leaves_cex",1) %>% set("leaves_col",color)
out3 = paste("hclust",".",out1,sep="")
rw = length(labels(hc))/2.5
pdf(file=paste(out3,".pdf",sep=""),width=rw,height=3)
par(mar=c(10,3,2,0),cex=1)
plot(dend,ylab="Height",cex=0.5)
dev.off()
rw = rw*80
png(filename=paste(out3,".png",sep=""),width=rw,height=300)
par(mar=c(10,3,2,0),cex=1)
plot(dend,ylab="Height",cex=0.5)
dev.off()
